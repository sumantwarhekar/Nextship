// Firestore Security Rules
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read all user profiles, but only edit their own
    match /users/{userId} {
      allow read: if true; // Anyone can read user profiles
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Username reservations - users can check if username exists, but only create their own
    match /usernames/{username} {
      allow read: if true; // Anyone can check if username exists
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
    }
    
    // Posts are readable by all, but only editable by the author
    match /users/{userId}/posts/{postId} {
      allow read: if true; // Anyone can read posts
      
      // Users can create their own posts with validation
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.heartCount == 0
        && request.resource.data.content.size() < 20000
        && request.resource.data.username == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
      
      // Users can update their own posts (but not uid, username)
      // OR any authenticated user can update ONLY the heart count
      allow update: if request.auth != null && (
        (
          // Owner updating their own post
          request.auth.uid == userId
          && request.resource.data.content.size() < 20000
          && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username'])
        ) || (
          // Anyone updating only heart count
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount'])
        )
      );
      
      // Users can delete their own posts
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Hearts subcollection - users can read all hearts but only manage their own
      match /hearts/{heartId} {
        allow read: if true; // Anyone can read hearts (to see who liked what)
        allow write: if request.auth != null && request.auth.uid == heartId; // Users can only create/delete their own heart
      }
    }
    
    // Global posts collection (if you're using collectionGroup queries)
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      // Posts in this collection should only be created via cloud functions
      // or through the user's subcollection
    }
  }
}